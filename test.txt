use std::env;
use std::fs;
use std::collections::HashMap;

mod riscv_core;

fn main() {
    let args: Vec<String> = env::args().collect();
    let file_path = &args[1];

    println!("Reading file {}", file_path);

    let contents = fs::read_to_string(file_path).expect("Could not read file!");

    let mut org_a_cycles: HashMap<String, u32> = HashMap::new();
    let mut org_b_cycles: HashMap<String, u32> = HashMap::new();

    // Define the number of cycles for each instruction format for each organization
    org_a_cycles.insert("R".to_string(), 4);
    org_a_cycles.insert("I".to_string(), 3);
    org_a_cycles.insert("S".to_string(), 4);
    org_a_cycles.insert("B".to_string(), 4);
    org_a_cycles.insert("U".to_string(), 4);
    org_a_cycles.insert("J".to_string(), 4);

    org_b_cycles.insert("R".to_string(), 3);
    org_b_cycles.insert("I".to_string(), 2);
    org_b_cycles.insert("S".to_string(), 3);
    org_b_cycles.insert("B".to_string(), 3);
    org_b_cycles.insert("U".to_string(), 3);
    org_b_cycles.insert("J".to_string(), 3);

    let mut org_a_total_cycles = 0;
    let mut org_b_total_cycles = 0;
    let mut org_a_instructions = 0;
    let mut org_b_instructions = 0;

    for line in contents.trim().lines() {
        let inst = riscv_core::instruction::Instruction::new(line);

        let opcode = inst.clone().get_opcode();
        let format = inst.clone().get_format();
        let cycles_a = org_a_cycles.get(format).unwrap();
        let cycles_b = org_b_cycles.get(format).unwrap();

        org_a_total_cycles += cycles_a;
        org_b_total_cycles += cycles_b;

        org_a_instructions += 1;
        org_b_instructions += 1;

        println!("Instruction: {}", line);
        println!("OpCode: {:?}", opcode);
        println!("Format: {}", format);
        println!("Org A Cycles: {}", cycles_a);
        println!("Org B Cycles: {}", cycles_b);
    }

    let org_a_cpi = org_a_total_cycles as f32 / org_a_instructions as f32;
    let org_b_cpi = org_b_total_cycles as f32 / org_b_instructions as f32;

    println!("Org A Total Cycles: {}", org_a_total_cycles);
    println!("Org B Total Cycles: {}", org_b_total_cycles);
    println!("Org A CPI: {:.2}", org_a_cpi);
    println!("Org B CPI: {:.2}", org_b_cpi);

    if org_a_cpi < org_b_cpi {
        let improvement = (org_b_cpi - org_a_cpi) / org_b_cpi * 100.0;
        println!("Org A is {:.2}% faster than Org B", improvement);
    } else {
        let improvement = (org_a_cpi - org_b_cpi) / org_a_cpi * 100.0;
        println!("Org B is {:.2}% faster than Org A", improvement);
    }
}